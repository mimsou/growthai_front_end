src\App.css 
-----------START OF FILE----------- 
-----------END OF FILE----------- 
 
src\App.js 
-----------START OF FILE----------- 
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import LandingPage from './components/Pages/LandingPage';
import SignIn from './components/Auth/SignIn';
import SignUp from './components/Auth/SignUp'; // Assuming you create this

function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<LandingPage />} />
        <Route path="/sign-in" element={<SignIn />} />
        <Route path="/sign-up" element={<SignUp />} /> {/* SignUp route */}
        {/* Other routes can go here */}
      </Routes>
    </Router>
  );
}

export default App;
-----------END OF FILE----------- 
 
src\App.test.js 
-----------START OF FILE----------- 
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
-----------END OF FILE----------- 
 
src\config.js 
-----------START OF FILE----------- 
const BASE_API_URL = 'http://localhost:5000/api';

export default BASE_API_URL;-----------END OF FILE----------- 
 
src\index.css 
-----------START OF FILE----------- 
@tailwind base;
@tailwind components;
@tailwind utilities;


.text-lg {
    font-size: 1.125rem;
    line-height: 1.75rem;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  .font-bold {
    font-weight: 700;
  }


  @keyframes aiPulse {
    0%, 100% {
      transform: scale(1) rotate(0deg);
    }
    50% {
      transform: scale(2) rotate(10deg); /* Slight scale and rotation */
    }
  }
  
  .animate-ai-pulse {
    animation: aiPulse 1.2s infinite ease-in-out; /* Smooth pulsing with rotation */
  }-----------END OF FILE----------- 
 
src\index.js 
-----------START OF FILE----------- 
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import store from './store/store';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>
);

reportWebVitals();-----------END OF FILE----------- 
 
src\logo.svg 
-----------START OF FILE----------- 
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>-----------END OF FILE----------- 
 
src\package-lock.json 
-----------START OF FILE----------- 
{
  "name": "src",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}
-----------END OF FILE----------- 
 
src\reportWebVitals.js 
-----------START OF FILE----------- 
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
-----------END OF FILE----------- 
 
src\setupTests.js 
-----------START OF FILE----------- 
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
-----------END OF FILE----------- 
 
    C:\Workspace\Web\Ai Business grow project\Front_end\src\components\AuditForm.js 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import auditService from '../services/auditService';

const AuditForm = ({ onSubmit }) => {
  const [url, setUrl] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(url);
  };

  return (
    <div className="max-w-md w-full p-6 bg-white rounded shadow-md mx-auto">
      <h2 className="text-2xl font-semibold mb-4">Website Audit</h2>
      <form onSubmit={handleSubmit}>
        <div className="flex items-center mb-4">
          <input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL"
            className="flex-1 appearance-none rounded border-gray-300 py-2 px-4 mr-2 focus:outline-none focus:border-blue-500"
          />
          <button
            type="submit"
            className="bg-blue-500 text-white py-2 px-4 rounded focus:outline-none hover:bg-blue-600"
          >
            Audit
          </button>
        </div>
      </form>
    </div>
  );
};

export default AuditForm;-----------END OF FILE----------- 
 
        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Auth\SignIn.js 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { signIn, loginWithGoogle } from '../../store/actions/authActions';
import BaseLayout from '../Layout/BaseLayout';
import { LockClosedIcon, EnvelopeIcon } from '@heroicons/react/24/solid';

const SignIn = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    try {
      await dispatch(signIn({ email, password }));
      navigate('/dashboard');
    } catch (err) {
      setError(err.message);
    }
  };

  const handleGoogleLogin = async () => {
    try {
      await dispatch(loginWithGoogle());
      navigate('/dashboard');
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <BaseLayout>
      <div className="max-w-lg mx-auto mt-10">
        <h2 className="text-3xl font-bold text-center text-gray-900">Sign In to Your Account</h2>
        <p className="text-center text-gray-600 mb-6">Welcome back! Please sign in to continue</p>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="relative">
            <label htmlFor="email" className="sr-only">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="Your Email"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <EnvelopeIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          <div className="relative">
            <label htmlFor="password" className="sr-only">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="Your Password"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <LockClosedIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          {error && <p className="text-red-500 text-sm">{error}</p>}
          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-3 rounded-full hover:bg-blue-600 transition-transform transform hover:scale-105 mt-6"
          >
            Sign In
          </button>
        </form>

        <div className="mt-6">
          <button
            type="button"
            onClick={handleGoogleLogin}
            className="w-full bg-red-500 text-white py-3 rounded-full hover:bg-red-600 transition-transform transform hover:scale-105 flex items-center justify-center space-x-2"
          >
            <svg className="h-5 w-5" viewBox="0 0 48 48">
              <path
                fill="#EA4335"
                d="M24 9.5c3.14 0 5.27 1.36 6.47 2.5l4.76-4.76C32.1 5.5 28.3 4 24 4 14.87 4 7.5 11.37 7.5 20.5S14.87 37 24 37c6.1 0 11.2-3.17 13.8-7.97l-5.68-4.73C30.82 26.62 27.59 28 24 28 17.73 28 12.5 22.77 12.5 16.5S17.73 9.5 24 9.5z"
              />
              <path
                fill="#4285F4"
                d="M38 20h-4v-4h-4v4h-4v4h4v4h4v-4h4v-4z"
              />
            </svg>
            <span>Sign in with Google</span>
          </button>
        </div>

        <div className="mt-6 text-center">
          <p className="text-gray-600">Don't have an account? <a href="/sign-up" className="text-blue-500">Sign Up</a></p>
        </div>
      </div>
    </BaseLayout>
  );
};

export default SignIn;
-----------END OF FILE----------- 
 
        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Auth\SignUp.js 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { signUp } from '../../store/actions/authActions';
import BaseLayout from '../Layout/BaseLayout';
import { UserPlusIcon, LockClosedIcon, EnvelopeIcon } from '@heroicons/react/24/solid';

const SignUp = () => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);
    
    try {
      await dispatch(signUp({ name, email, password }));
      navigate('/dashboard');
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <BaseLayout>
      <div className="max-w-lg mx-auto mt-10">
        <h2 className="text-3xl font-bold text-center text-gray-900">Create Your Account</h2>
        <p className="text-center text-gray-600 mb-6">Join us and start optimizing your online presence</p>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="relative">
            <label htmlFor="name" className="sr-only">Name</label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              placeholder="Your Name"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <UserPlusIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          <div className="relative">
            <label htmlFor="email" className="sr-only">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="Your Email"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <EnvelopeIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          <div className="relative">
            <label htmlFor="password" className="sr-only">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="Create a Password"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <LockClosedIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          {error && <p className="text-red-500 text-sm">{error}</p>}
          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-3 rounded-full hover:bg-blue-600 transition-transform transform hover:scale-105 mt-6"
          >
            Sign Up
          </button>
        </form>

        <div className="mt-6 text-center">
          <p className="text-gray-600">Already have an account? <a href="/sign-in" className="text-blue-500">Sign In</a></p>
        </div>
      </div>
    </BaseLayout>
  );
};

export default SignUp;
-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Layout\BaseLayout.js 
-----------START OF FILE----------- 
import React from 'react';
import TopBar from './TopBar';
import Footer from './Footer';
import WaveDivider from '../Ui/WaveDivider';

const BaseLayout = ({ children }) => {
  return (
    <div className="bg-gradient-to-b from-white via-gray-100 to-gray-200 min-h-screen flex flex-col items-center relative">
      <TopBar />
      <main className="flex-grow flex flex-col items-center justify-center mt-32 space-y-12">
        {children} 
      </main>
      <WaveDivider />
      <Footer />
    </div>
  );
};

export default BaseLayout;
-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Layout\Footer.js 
-----------START OF FILE----------- 
import React from 'react';

const Footer = () => {
  return (
    <footer className="bg-gray-200 text-gray-700 py-6 w-full">
      <div className="container mx-auto px-4 text-center">
        <p className="text-sm">© 2024 Your Company. All rights reserved.</p>
        <nav className="mt-4">
          <a href="/privacy-policy" className="mx-2 text-sm hover:text-gray-900 transition-colors">Privacy Policy</a>
          <a href="/terms-of-service" className="mx-2 text-sm hover:text-gray-900 transition-colors">Terms of Service</a>
        </nav>
      </div>
    </footer>
  );
};

export default Footer;-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Layout\TopBar.js 
-----------START OF FILE----------- 
import React from 'react';
import { Link } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { UserIcon, UserPlusIcon, ArrowRightOnRectangleIcon } from '@heroicons/react/24/solid';
import { signIn } from '../../store/actions/authActions';

const TopBar = () => {
  const isAuthenticated = useSelector((state) => state.auth.isAuthenticated);
  const dispatch = useDispatch();

  const handleSignOut = () => {
   // dispatch(signOut());
  };

  return (
    <header className="w-full bg-white border-b border-gray-200 fixed top-0 left-0 z-50">
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        <h1 className="text-xl font-semibold text-gray-800">SEO Audit SaaS</h1>
        <nav className="flex items-center space-x-6">
          {isAuthenticated ? (
            <button
              onClick={handleSignOut}
              className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors"
            >
              <ArrowRightOnRectangleIcon className="h-5 w-5" />
              <span className="font-medium">Sign Out</span>
            </button>
          ) : (
            <>
              <Link to="/sign-in" className="flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors">
                <UserIcon className="h-5 w-5" />
                <span className="font-medium">Sign In</span>
              </Link>
              <Link to="/sign-up" className="flex items-center space-x-2 px-4 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 transition-all">
                <UserPlusIcon className="h-5 w-5" />
                <span className="font-medium">Sign Up</span>
              </Link>
            </>
          )}
        </nav>
      </div>
    </header>
  );
};

export default TopBar;
-----------END OF FILE----------- 
 
                C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Pages\LandingPage.js 
-----------START OF FILE----------- 
import React from 'react';
import MovingDotCircle from '../Ui/MovingDotCircle';
import SearchInput from '../Ui/SearchInput';
import BaseLayout from '../Layout/BaseLayout';

const LandingPage = () => {
  return (
    <BaseLayout>
      <MovingDotCircle />
      <SearchInput />
    </BaseLayout>
  );
};

export default LandingPage;-----------END OF FILE----------- 
 
                    C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Pages\Audit\MobileFriendlinessCard.js 
-----------START OF FILE----------- 

import React from 'react';

const MobileFriendlinessCard = ({ result }) => {
  return (
    <div className="bg-white rounded shadow p-4 mb-4">
      <h2 className="text-lg font-semibold mb-2">Mobile Friendliness Report</h2>
      <div className="grid grid-cols-2 gap-4">
        <div>
          <p className={`text-gray-600 mb-1 ${result.report.hasViewportSetting ? 'text-green-500' : 'text-red-500'}`}>
            <strong>Viewport Setting:</strong> {result.report.hasViewportSetting ? 'Present' : 'Missing'}
          </p>
          <p className={`text-gray-600 mb-1 ${result.report.isResponsiveDesign ? 'text-green-500' : 'text-red-500'}`}>
            <strong>Responsive Design:</strong> {result.report.isResponsiveDesign ? 'Yes' : 'No'}
          </p>
          <p className={`text-gray-600 mb-1 ${result.report.hasTouchElements ? 'text-green-500' : 'text-red-500'}`}>
            <strong>Touch Elements:</strong> {result.report.hasTouchElements ? 'Yes' : 'No'}
          </p>
        </div>
        <div>
          <p className={`text-gray-600 mb-1 ${result.report.isFontSizeReadable ? 'text-green-500' : 'text-red-500'}`}>
            <strong>Font Size Readable:</strong> {result.report.isFontSizeReadable ? 'Yes' : 'No'}
          </p>
          <p className={`text-gray-600 mb-1 ${result.report.hasTapTargets ? 'text-green-500' : 'text-red-500'}`}>
            <strong>Tap Targets:</strong> {result.report.hasTapTargets ? 'Yes' : 'No'}
          </p>
          <p className={`text-gray-600 mb-1 ${result.report.hasMobileMediaQueries ? 'text-green-500' : 'text-red-500'}`}>
            <strong>Mobile Media Queries:</strong> {result.report.hasMobileMediaQueries ? 'Yes' : 'No'}
          </p>
        </div>
      </div>
      <div className="mt-4">
        <p className={`text-gray-600 mb-1 ${result.hasImageOptimization ? 'text-green-500' : 'text-red-500'}`}>
          <strong>Image Optimization:</strong> {result.hasImageOptimization ? 'Yes' : 'No'}
        </p>
        <p className={`text-gray-600 mb-1 ${result.report.hasTouchGestureSupport ? 'text-green-500' : 'text-red-500'}`}>
          <strong>Touch Gesture Support:</strong> {result.report.hasTouchGestureSupport ? 'Yes' : 'No'}
        </p>
        <p className="text-gray-600 mb-1"><strong>Content Width:</strong> {result.contentWidth}px</p>
      </div>
    </div>
  );
};

export default MobileFriendlinessCard;-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Ui\Icons.js 
-----------START OF FILE----------- 
import React from 'react';

export const GoogleIcon = ({ className }) => (
  <svg
    className={className}
    viewBox="0 0 48 48"
    width="24px"
    height="24px"
  >
    <path fill="#EA4335" d="M24 9.5c3.2 0 5.4 1.4 6.6 2.6l4.9-4.9C32.8 5.6 28.8 4 24 4c-6.1 0-11.4 3.4-14.1 8.4l5.7 4.5c1.5-4.5 5.8-7.4 10.4-7.4z"/>
    <path fill="#4285F4" d="M13.5 15.5l-5.7-4.5C5.3 13.2 4 16.5 4 20s1.3 6.8 3.8 9.1l5.5-4.4c-.7-1.7-1.1-3.4-1.1-5.2s.4-3.5 1.1-5.1z"/>
    <path fill="#FBBC05" d="M24 44c4.3 0 7.9-1.4 10.5-3.7l-5.1-4.1c-1.4 1-3.2 1.6-5.3 1.6-4.4 0-8.2-2.9-9.6-7l-5.5 4.3C12.6 40.6 18 44 24 44z"/>
    <path fill="#34A853" d="M43.6 20.3H24v7.4h11.3c-1 3.1-3.5 5.7-6.6 7l5.1 4.1c3.3-3 5.2-7.5 5.2-12.5 0-1-.1-2-.3-3z"/>
  </svg>
);
-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Ui\MovingDotCircle.js 
-----------START OF FILE----------- 
import React, { useEffect, useRef, useState } from 'react';
import { useSelector } from 'react-redux';

const messages = [
  "Welcome, please enter the URL of your online business.",
  "After that, we dive into improving your website.",
  "So your business can flourish."
];

const MovingDotCircle = () => {
  const dotRef = useRef(null);
  const isLoading = useSelector((state) => state.search.isLoading);
  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [fadeIn, setFadeIn] = useState(true);

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (dotRef.current && !isLoading) {
        const circle = dotRef.current.parentElement;
        const circleRect = circle.getBoundingClientRect();
        const circleRadius = circleRect.width / 2;
        const maxMovement = circleRadius * 0.05;

        const x = e.clientX - (circleRect.left + circleRadius);
        const y = e.clientY - (circleRect.top + circleRadius);

        const scaledX = (x / circleRadius) * maxMovement;
        const scaledY = (y / circleRadius) * maxMovement;

        dotRef.current.style.transform = `translate(${scaledX}px, ${scaledY}px)`;
      }
    };

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isLoading]);

  useEffect(() => {
    if (dotRef.current) {
      if (isLoading) {
        dotRef.current.classList.add('animate-ai-pulse');
      } else {
        dotRef.current.classList.remove('animate-ai-pulse');
      }
    }
  }, [isLoading]);

  useEffect(() => {
    const interval = setInterval(() => {
      setFadeIn(false);
      setTimeout(() => {
        setCurrentMessageIndex((prevIndex) => (prevIndex + 1) % messages.length);
        setFadeIn(true);
      }, 2000);
    }, 4000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="flex flex-col items-center">
      <div
        className="w-32 h-32 rounded-full border border-gray-300 flex items-center justify-center bg-white shadow-sm mb-4"
      >
        <div
          ref={dotRef}
          className="w-4 h-4 bg-red-500 rounded-full transition-transform duration-75"
        ></div>
      </div>
      <p
        className={`text-3xl font-bold tracking-tight text-gray-900 text-center leading-tight transition-opacity duration-500 ${fadeIn ? 'opacity-100' : 'opacity-0'}`}
      >
        {messages[currentMessageIndex]}
      </p>
    </div>
  );
};

export default MovingDotCircle;
-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Ui\SearchInput.js 
-----------START OF FILE----------- 
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setUrl, setLoading } from '../../store/actions';

const SearchInput = () => {
  const dispatch = useDispatch();
  const url = useSelector((state) => state.search.url);

  const handleChange = (e) => {
    dispatch(setUrl(e.target.value));
  };

  const handleSubmit = () => {
    dispatch(setLoading(true));
    setTimeout(() => dispatch(setLoading(false)), 2000); // Simulate API call
  };

  return (
    <div className="relative w-full max-w-lg">
      <div
        className="flex items-center border border-gray-300 rounded-full px-5 py-3 bg-white shadow-sm transition-all duration-300 ease-in-out"
        style={{ maxWidth: '500px', width: '100%' }}
      >
        <input
          type="text"
          value={url}
          onChange={handleChange}
          placeholder="Enter website URL"
          className="flex-1 bg-transparent text-lg focus:outline-none transition-all duration-300 ease-in-out text-gray-700"
        />
        <button
          className="bg-gradient-to-r from-blue-500 to-purple-600 text-white font-semibold px-6 py-2 rounded-full shadow-lg transform transition-transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-purple-400"
          onClick={handleSubmit}
          style={{ width: '100px' }}
        >
          Audit
        </button>
      </div>
    </div>
  );
};

export default SearchInput;
-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Ui\Spinner.js 
-----------START OF FILE----------- 
import React from 'react';

const Spinner = () => {
  return (
    <div className="flex justify-center items-center mt-4">
      <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );
};

export default Spinner;-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\Front_end\src\components\Ui\WaveDivider.js 
-----------START OF FILE----------- 
import React from 'react';

const WaveDivider = () => {
  return (
    <div className="w-full">
      <svg viewBox="0 0 1440 320" className="w-full">
        <path fill="#E5E7EB" fillOpacity="1" d="M0,160L40,170.7C80,181,160,203,240,197.3C320,192,400,160,480,144C560,128,640,128,720,138.7C800,149,880,171,960,170.7C1040,171,1120,149,1200,144C1280,139,1360,149,1400,154.7L1440,160L1440,320L0,320Z"></path>
      </svg>
    </div>
  );
};

export default WaveDivider;-----------END OF FILE----------- 
 
                            C:\Workspace\Web\Ai Business grow project\Front_end\src\services\auditService.js 
-----------START OF FILE----------- 
import axios from 'axios';

const BASE_URL = 'https://growthagent.onrender.com/api'; // Update with your actual backend URL

const auditService = {
  fetchAuditResults: async (url, auditSteps) => {
    const results = {};
    for (const step of auditSteps) {
      try {
        const response = await axios.post(`${BASE_URL}/audit/${step.urlText}`, { url });
        results[step.name] = response.data;
      } catch (error) {
        console.error(`Error fetching audit results for ${step.name}:`, error);
        // Handle error if needed
      }
    }
    return results;
  }
};

export default auditService;-----------END OF FILE----------- 
 
                            C:\Workspace\Web\Ai Business grow project\Front_end\src\services\authService.js 
-----------START OF FILE----------- 
export const handleGoogleLogin = () => {
    // Placeholder for Google OAuth flow
    // You will integrate this with your backend logic later
    console.log('Google Login');
  };
  
  // Placeholder for future social logins (e.g., Facebook, Twitter, etc.)
  export const handleFacebookLogin = () => {
    console.log('Facebook Login');
  };
  
  export const handleTwitterLogin = () => {
    console.log('Twitter Login');
  };
  -----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\Front_end\src\store\actions.js 
-----------START OF FILE----------- 
import { SET_URL, SET_LOADING } from './actions/actionTypes';

export const setUrl = (url) => ({
  type: SET_URL,
  payload: url,
});

export const setLoading = (isLoading) => ({
  type: SET_LOADING,
  payload: isLoading,
});
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\Front_end\src\store\store.js 
-----------START OF FILE----------- 
import { configureStore } from '@reduxjs/toolkit';
import {thunk} from 'redux-thunk';
import rootReducer from './reducers';

const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),
});

export default store;
-----------END OF FILE----------- 
 
                                    C:\Workspace\Web\Ai Business grow project\Front_end\src\store\actions\actionTypes.js 
-----------START OF FILE----------- 
export const AUTH_REQUEST = 'AUTH_REQUEST';
export const AUTH_SUCCESS = 'AUTH_SUCCESS';
export const AUTH_FAILURE = 'AUTH_FAILURE';
export const SIGN_IN_SUCCESS = 'SIGN_IN_SUCCESS';
export const SIGN_IN_FAILURE = 'SIGN_IN_FAILURE';
export const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';
export const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';
export const SIGN_OUT = 'SIGN_OUT';

// Search action types
export const SET_URL = 'SET_URL';
export const SET_LOADING = 'SET_LOADING';
-----------END OF FILE----------- 
 
                                    C:\Workspace\Web\Ai Business grow project\Front_end\src\store\actions\authActions.js 
-----------START OF FILE----------- 
import axios from 'axios';
import {
  AUTH_REQUEST,
  AUTH_SUCCESS,
  AUTH_FAILURE,
  SIGN_IN_SUCCESS,
  SIGN_IN_FAILURE,
  SIGN_UP_SUCCESS,
  SIGN_UP_FAILURE,
  SIGN_OUT,
} from './actionTypes';
import {jwtDecode} from 'jwt-decode';
import { handleGoogleLogin } from '../../services/authService';
import BASE_API_URL from '../../config';

export const signUp = (userData) => async (dispatch) => {
  dispatch({ type: AUTH_REQUEST });
  try {
    const response = await axios.post(`${BASE_API_URL}/auth/signup`, userData);
    localStorage.setItem('token', response.data.token);

    dispatch({
      type: SIGN_UP_SUCCESS,
      payload: response.data.user,
    });
  } catch (error) {
    dispatch({
      type: SIGN_UP_FAILURE,
      payload: error.response?.data?.message || 'Sign-up failed',
    });
    throw new Error(error.response?.data?.message || 'Sign-up failed');
  }
};

export const signIn = (credentials) => async (dispatch) => {
  dispatch({ type: AUTH_REQUEST });
  try {
    const response = await axios.post(`${BASE_API_URL}/auth/login`, credentials);
    console.log(response.data.access_toke,response);
    localStorage.setItem('token', response.data.access_token);
    const decodedUser = jwtDecode(response.data.access_token);
    dispatch({
      type: SIGN_IN_SUCCESS,
      payload: decodedUser,
    });
  } catch (error) {
    dispatch({
      type: SIGN_IN_FAILURE,
      payload: error.response?.data?.message || 'Sign-in failed',
    });
    throw new Error(error.response?.data?.message || 'Sign-in failed');
  }
};

export const signOut = () => (dispatch) => {
  localStorage.removeItem('token');
  dispatch({ type: SIGN_OUT });
};

export const loginWithGoogle = () => {
  return async (dispatch) => {
    dispatch({ type: AUTH_REQUEST });
    try {
      const userData = await handleGoogleLogin();
      dispatch({ type: AUTH_SUCCESS, payload: userData });
    } catch (error) {
      dispatch({ type: AUTH_FAILURE, payload: error.message });
    }
  };
};
-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\Front_end\src\store\reducers\authReducer.js 
-----------START OF FILE----------- 
import {
    AUTH_REQUEST,
    AUTH_SUCCESS,
    AUTH_FAILURE,
    SIGN_IN_SUCCESS,
    SIGN_IN_FAILURE,
    SIGN_UP_SUCCESS,
    SIGN_UP_FAILURE,
    SIGN_OUT,
  } from '../actions/actionTypes';
  
  const initialState = {
    isAuthenticated: false,
    user: null,
    token: null,
    error: null,
    isLoading: false,
  };
  
  const authReducer = (state = initialState, action) => {
    switch (action.type) {
      case SIGN_IN_SUCCESS:
        return {
          ...state,
          isAuthenticated: true,
          user: action.payload,
          token: action.payload.token,
          error: null,
          isLoading: false,
        };
      case SIGN_IN_FAILURE:
      case SIGN_UP_FAILURE:
      case AUTH_FAILURE:
        return {
          ...state,
          isAuthenticated: false,
          user: null,
          token: null,
          error: action.payload,
          isLoading: false,
        };
      case SIGN_UP_SUCCESS:
        return {
          ...state,
          isAuthenticated: true,
          user: action.payload,
          token: action.payload.token,
          error: null,
          isLoading: false,
        };
      case SIGN_OUT:
        return initialState;
      case AUTH_REQUEST:
        return {
          ...state,
          isLoading: true,
          error: null,
        };
      case AUTH_SUCCESS:
        return {
          ...state,
          isLoading: false,
          isAuthenticated: true,
          user: action.payload,
        };
      default:
        return state;
    }
  };
  
  export default authReducer;
  -----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\Front_end\src\store\reducers\index.js 
-----------START OF FILE----------- 
import { combineReducers } from 'redux';
import searchReducer from './searchReducer';
import authReducer from './authReducer';

const rootReducer = combineReducers({
  search: searchReducer,
  auth: authReducer,
});

export default rootReducer;-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\Front_end\src\store\reducers\rootReducer.js 
-----------START OF FILE----------- 
import { combineReducers } from 'redux';
import searchReducer from './searchReducer';

const rootReducer = combineReducers({
  search: searchReducer,
});

export default rootReducer;-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\Front_end\src\store\reducers\searchReducer.js 
-----------START OF FILE----------- 
import { SET_URL, SET_LOADING } from '../actions/actionTypes';

const initialState = {
  url: '',
  isLoading: false,
};

const searchReducer = (state = initialState, action) => {
  switch (action.type) {
    case SET_URL:
      return {
        ...state,
        url: action.payload,
      };
    case SET_LOADING:
      return {
        ...state,
        isLoading: action.payload,
      };
    default:
      return state;
  }
};

export default searchReducer;
-----------END OF FILE----------- 
 
