src\App.css 
-----------START OF FILE----------- 
-----------END OF FILE----------- 
 
src\App.test.tsx 
-----------START OF FILE----------- 
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});
-----------END OF FILE----------- 
 
src\App.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { BrowserRouter as Router } from 'react-router-dom';
import AppRoutes from './routes/AppRoutes';

const App: React.FC = () => {
  return (
        <Router>
          <AppRoutes />
        </Router>
  );
};

export default App;-----------END OF FILE----------- 
 
src\config.ts 
-----------START OF FILE----------- 
const BASE_API_URL: string = 'http://localhost:5000/api';
export const BASE_URL: string = 'http://localhost:5000';
export default BASE_API_URL;
-----------END OF FILE----------- 
 
src\index.css 
-----------START OF FILE----------- 
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-background text-text-primary font-sans;
}

h1, h2, h3, h4, h5, h6 {
  @apply font-semibold;
}

.text-lg {
    font-size: 1.125rem;
    line-height: 1.75rem;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  .font-bold {
    font-weight: 700;
  }


  @keyframes aiPulse {
    0%, 100% {
      transform: scale(1) rotate(0deg);
    }
    50% {
      transform: scale(2) rotate(10deg); /* Slight scale and rotation */
    }
  }
  
  .animate-ai-pulse {
    animation: aiPulse 1.2s infinite ease-in-out; /* Smooth pulsing with rotation */
  }

  .animate-spinner{
    transition: all 1s ease-in-out;
    transition-property: transform, top, left , bottom, right , opacity;
  }

  @keyframes spin-fast {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  .animate-spin-fast {
    animation: spin-fast 2s linear infinite; /* Adjust the speed of the spin */
  }

  .position_animation{
    position: absolute;
    top: 10%;
    left: 10%;
    transform-origin: center;
  }

  pre {
    background-color: #f4f4f4;
    border: 1px solid #ddd;
    border-radius: 4px;
    padding: 1rem;
    overflow-x: auto;
    font-family: 'Courier New', Courier, monospace;
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 1rem;
  }
  
  code {
    background-color: #f0f0f0;
    border-radius: 3px;
    padding: 0.2rem 0.4rem;
    font-family: 'Courier New', Courier, monospace;
    font-size: 0.9em;
    color: #333;
  }
  
  pre code {
    background-color: transparent;
    padding: 0;
    font-size: inherit;
    color: inherit;
  }

  
  -----------END OF FILE----------- 
 
src\index.tsx 
-----------START OF FILE----------- 
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { GoogleOAuthProvider } from '@react-oauth/google';
import store from './store/store';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <GoogleOAuthProvider clientId={"244958252159-hl1ir8a7isdhpletnuuvbdobtdcfjebk.apps.googleusercontent.com"}>
        <App />
      </GoogleOAuthProvider>
    </Provider>
  </React.StrictMode>
);

reportWebVitals();
-----------END OF FILE----------- 
 
src\logo.svg 
-----------START OF FILE----------- 
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>-----------END OF FILE----------- 
 
src\package-lock.json 
-----------START OF FILE----------- 
{
  "name": "src",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {}
}
-----------END OF FILE----------- 
 
src\reportWebVitals.ts 
-----------START OF FILE----------- 
const reportWebVitals = (onPerfEntry?: (entry: any) => void) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;
-----------END OF FILE----------- 
 
src\setupTests.ts 
-----------START OF FILE----------- 
import '@testing-library/jest-dom';
-----------END OF FILE----------- 
 
    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\AuditForm.tsx 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import auditService from '../services/auditService';

interface AuditFormProps {
  onSubmit: (url: string) => void;
}

const AuditForm: React.FC<AuditFormProps> = ({ onSubmit }) => {
  const [url, setUrl] = useState<string>('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(url);
  };

  return (
    <div className="max-w-md w-full p-6 bg-white rounded shadow-md mx-auto">
      <h2 className="text-2xl font-semibold mb-4">Website Audit</h2>
      <form onSubmit={handleSubmit}>
        <div className="flex items-center mb-4">
          <input
            type="text"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            placeholder="Enter website URL"
            className="flex-1 appearance-none rounded border-gray-300 py-2 px-4 mr-2 focus:outline-none focus:border-blue-500"
          />
          <button
            type="submit"
            className="bg-blue-500 text-white py-2 px-4 rounded focus:outline-none hover:bg-blue-600"
          >
            Audit
          </button>
        </div>
      </form>
    </div>
  );
};

export default AuditForm;
-----------END OF FILE----------- 
 
    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\CrawlingProgress.tsx 
-----------START OF FILE----------- 
import React, { useState, useEffect, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import {BASE_URL} from '../config';

interface CrawlingProgressProps {
  sessionId: string;
}

const CrawlingProgress: React.FC<CrawlingProgressProps> = ({ sessionId }) => {
  const [progress, setProgress] = useState(0);
  const [currentUrl, setCurrentUrl] = useState('');
  const socketRef = useRef<Socket | null>(null);

  useEffect(() => {
    const connectSocket = () => {
      socketRef.current = io(BASE_URL, {
        transports: ['websocket'],
        withCredentials: true,
      });

      socketRef.current.on('connect', () => {
        console.log('WebSocket connected');
      });

      socketRef.current.on('crawlingProgress', (data: { percentage: number; currentUrl: string }) => {
        console.log('Received crawling progress:', data);
        setProgress(data.percentage);
        setCurrentUrl(data.currentUrl);
      });

      socketRef.current.on('crawlingCompleted', (data: { averageScores: string }) => {
        console.log('Received crawling progress:', data);
      });


      socketRef.current.on('disconnect', () => {
        console.log('WebSocket disconnected');
      });

      socketRef.current.on('connect_error', (error) => {
        console.error('Connection error:', error);
        setTimeout(() => {
          socketRef.current?.connect();
        }, 1000);
      });
    };

    connectSocket();

    return () => {
      if (socketRef.current) {
        socketRef.current.disconnect();
      }
    };
  }, []);

  const truncateUrl = (url: string, maxLength: number) => {
    return url.length > maxLength ? url.substring(0, maxLength - 3) + '...' : url;
  };

  return (
    <div className="flex items-center space-x-2 w-3/4">
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div 
          className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
          style={{ width: `${progress}%` }}
        ></div>
      </div>
      <span className="text-xs text-gray-600 truncate max-w-xs">
        {truncateUrl(currentUrl, 30)}
      </span>
    </div>
  );
};

export default CrawlingProgress;-----------END OF FILE----------- 
 
        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Auth\SignIn.tsx 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { GoogleLogin, CredentialResponse } from '@react-oauth/google';
import { signIn, handleGoogleSignIn } from '../../store/actions/authActions';
import { LockClosedIcon, EnvelopeIcon } from '@heroicons/react/24/solid';
import AuthLayout from 'components/Layout/AuthLayout';
import InputField from 'components/Ui/InputField';
import Button from 'components/Ui/Button';

const SignIn: React.FC = () => {
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await dispatch(signIn({ email, password }));
      navigate('/dashboard');
    } catch (err: any) {
      // Handle error (you might want to set an error state and display it)
    }
  };

  const handleGoogleSuccess = (credentialResponse: CredentialResponse) => {
    dispatch(handleGoogleSignIn(credentialResponse, navigate));
  };

  return (
    <AuthLayout title="Sign In to Your Account" subtitle="Welcome back! Please sign in to continue">
      <form onSubmit={handleSubmit} className="space-y-6">
        <InputField
          type="email"
          value={email}
          onChange={setEmail}
          placeholder="Your Email"
          icon={<EnvelopeIcon className="h-5 w-5 text-gray-500" />}
        />
        <InputField
          type="password"
          value={password}
          onChange={setPassword}
          placeholder="Your Password"
          icon={<LockClosedIcon className="h-5 w-5 text-gray-500" />}
        />
        <Button type="submit" fullWidth>Sign In</Button>
      </form>

      <div className="mt-6 flex justify-center">
           <GoogleLogin
                  onSuccess={handleGoogleSuccess}
                  useOneTap
                  size='large'
                  type='icon'
                  className="w-full max-w-xs"
                />
      </div>

      <div className="mt-6 text-center">
        <p className="text-gray-600">Don't have an account? <a href="/sign-up" className="text-primary">Sign Up</a></p>
      </div>
    </AuthLayout>
  );
};

export default SignIn;-----------END OF FILE----------- 
 
        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Auth\SignUp.tsx 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { signUp } from '../../store/actions/authActions';
import { UserPlusIcon, LockClosedIcon, EnvelopeIcon } from '@heroicons/react/24/solid';
import AuthLayout from 'components/Layout/AuthLayout';

const SignUp: React.FC = () => {
  const [name, setName] = useState<string>('');
  const [email, setEmail] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [error, setError] = useState<string | null>(null);
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    
    try {
      await dispatch(signUp({ name, email, password }));
      navigate('/dashboard');
    } catch (err: any) {
      setError(err.message);
    }
  };

  return (
    <AuthLayout title="Create Your Account" subtitle="Join us and start optimizing your online presence">
       <form onSubmit={handleSubmit} className="space-y-6">
          <div className="relative">
            <label htmlFor="name" className="sr-only">Name</label>
            <input
              type="text"
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
              placeholder="Your Name"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <UserPlusIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          <div className="relative">
            <label htmlFor="email" className="sr-only">Email</label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              placeholder="Your Email"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <EnvelopeIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          <div className="relative">
            <label htmlFor="password" className="sr-only">Password</label>
            <input
              type="password"
              id="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              placeholder="Create a Password"
              className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-blue-500"
            />
            <LockClosedIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-500" />
          </div>
          {error && <p className="text-red-500 text-sm">{error}</p>}
          <button
            type="submit"
            className="w-full bg-blue-500 text-white py-3 rounded-full hover:bg-blue-600 transition-transform transform hover:scale-105 mt-6"
          >
            Sign Up
          </button>
        </form>

        <div className="mt-6 text-center">
          <p className="text-gray-600">Already have an account? <a href="/sign-in" className="text-blue-500">Sign In</a></p>
        </div>
    </AuthLayout>
  );
};

export default SignUp;
-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Layout\AuthLayout.tsx 
-----------START OF FILE----------- 
import React, { ReactNode } from 'react';

interface AuthLayoutProps {
  children: ReactNode;
  title: string;
  subtitle: string;
}

const AuthLayout: React.FC<AuthLayoutProps> = ({ children, title, subtitle }) => {
  return (
    <div className="max-w-lg mx-auto mt-20">
      <h2 className="text-3xl font-bold text-center text-gray-900">{title}</h2>
      <p className="text-center text-gray-600 mb-6">{subtitle}</p>
      {children}
    </div>
  );
};

export default AuthLayout;
-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Layout\BaseLayout.tsx 
-----------START OF FILE----------- 
import React, { ReactNode } from 'react';
import TopBar from './TopBar';
import Footer from './Footer';

interface BaseLayoutProps {
  children: ReactNode;
}

const BaseLayout: React.FC<BaseLayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col mt-20">
      <TopBar />
      <main className="flex-grow container mx-auto px-4 py-8">
        {children}
      </main>
      <Footer />
    </div>
  );
};

export default BaseLayout;-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Layout\DashboardLayout.tsx 
-----------START OF FILE----------- 
import React, { ReactNode } from 'react';

interface DashboardLayoutProps {
  children: ReactNode;
}

const DashboardLayout: React.FC<DashboardLayoutProps> = ({ children }) => {
  return (
    <div className="flex">
      <main className="flex-1 p-6 bg-background">
        {children}
      </main>
    </div>
  );
};

export default DashboardLayout;
-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Layout\Footer.tsx 
-----------START OF FILE----------- 
import WaveDivider from 'components/Ui/WaveDivider';
import React from 'react';

const Footer: React.FC = () => {
  return (
    <>
    <WaveDivider />
    <footer className="bg-gray-200 text-gray-700 py-6 w-full   bottom-0 left-0 right-0 z-10">
      <div className="container mx-auto px-4 text-center">
        <p className="text-sm">© 2024 Your Company. All rights reserved.</p>
        <nav className="mt-4">
          <a href="/privacy-policy" className="mx-2 text-sm hover:text-gray-900 transition-colors">Privacy Policy</a>
          <a href="/terms-of-service" className="mx-2 text-sm hover:text-gray-900 transition-colors">Terms of Service</a>
        </nav>
      </div>
    </footer>
    </>
  );
};

export default Footer;
-----------END OF FILE----------- 
 
            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Layout\TopBar.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { Link } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { UserIcon, UserPlusIcon, ArrowRightOnRectangleIcon } from '@heroicons/react/24/outline';
import { signOut } from '../../store/actions/authActions';
import { RootState } from '../../store/reducers';
import Menu from '../Ui/Menu';

const TopBar: React.FC = () => {
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
  const user = useSelector((state: RootState) => state.auth.user);
  const dispatch = useDispatch();

  const handleSignOut = () => {
    dispatch(signOut());
  };

  const menuItems = [
    { label: 'Dashboard', link: '/dashboard' },
    { label: 'SEO Audit', link: '/seo-audit' },
    { label: 'Keyword Research', link: '/keyword-research' },
    { label: 'Content Analysis', link: '/content-analysis' },
    { label: 'Backlink Analysis', link: '/backlink-analysis' },
  ];

  return (
    <header className="fixed top-0 left-0 right-0 z-50 bg-background">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center py-4">
          <div className="flex items-center">
            <Link to="/" className="text-xl font-semibold text-gray-800 hover:text-gray-900 transition-colors mr-8">
              SEO Audit SaaS
            </Link>
            <Menu items={menuItems} />
          </div>
          <div className="flex items-center">
            {isAuthenticated ? (
              <>
                {user?.picture ? (
                  <img src={user.picture} alt={user.name} className="w-8 h-8 rounded-full mr-2" />
                ) : (
                  <div className="w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center mr-2">
                    <UserIcon className="w-5 h-5 text-gray-500" />
                  </div>
                )}
                <span className="text-gray-700 text-sm mr-4">{user?.name}</span>
                <button
                  onClick={handleSignOut}
                  className="text-gray-600 hover:text-gray-800 font-medium text-sm flex items-center transition-colors"
                >
                  <ArrowRightOnRectangleIcon className="h-4 w-4 mr-1" />
                  Sign Out
                </button>
              </>
            ) : (
              <>
                <Link to="/sign-in" className="text-gray-600 hover:text-gray-800 font-medium text-sm mr-6 transition-colors">
                  Sign In
                </Link>
                <Link
                  to="/sign-up"
                  className="text-indigo-600 hover:text-indigo-700 font-medium text-sm flex items-center transition-colors"
                >
                  <UserPlusIcon className="h-4 w-4 mr-1" />
                  Sign Up
                </Link>
              </>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};

export default TopBar;
-----------END OF FILE----------- 
 
                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Layout\AuditLayout\AuditCardLayout.tsx 
-----------START OF FILE----------- 
import React from 'react';
import * as HeroIcons from '@heroicons/react/24/outline';

type IconName = keyof typeof HeroIcons;

interface AuditCardLayoutProps {
  children: React.ReactNode;
  title: string;
  iconName?: IconName;
}

const AuditCardLayout: React.FC<AuditCardLayoutProps> = ({ children, title, iconName, ...props }) => {
  const IconComponent = iconName ? HeroIcons[iconName] : null;

  return (
    <div  {...props}>
      <div className="px-6 py-4 border-b border-gray-100">
        <h2 className="text-base font-medium text-gray-800 flex items-center">
          {IconComponent && <IconComponent className="w-5 h-5 mr-2 text-indigo-600" />}
          {title}
        </h2>
      </div>
      <div className="px-6 py-4">
        {children}
      </div>
    </div>
  );
};

export default AuditCardLayout;-----------END OF FILE----------- 
 
                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\AuditPage.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { motion } from 'framer-motion';
import { useSelector } from 'react-redux';
import { RootState } from 'store/reducers';
import AuditProgress from './Audit/AuditProgress';
import CrawlingProgress from '../CrawlingProgress';

const AuditPage: React.FC = () => {
  const url = useSelector((state: RootState) => state.search.url);
  const sessionId = useSelector((state: RootState) => state.ai.sessionId);

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
      className="flex flex-col w-full h-screen"
    >
      <div className="bg-white shadow-sm">
  <div className="max-w-7xl mx-auto px-4 py-2">
    <div className="flex items-center justify-between text-sm">
      <div className="flex items-center space-x-4">
        <span className="font-medium text-gray-700">Auditing:</span>
        <span className="text-gray-600 truncate max-w-xs">{url}</span>
      </div>
      
      <div className="flex items-center space-x-4">
        <span className="text-gray-500">Session ID: {sessionId}</span>
        {sessionId && <CrawlingProgress sessionId={sessionId} />}
        <div className="flex items-center">
          <span className="h-2 w-2 bg-green-500 rounded-full animate-pulse mr-2"></span>
          <span className="text-green-600 font-medium">In Progress</span>
        </div>
      </div>
    </div>
  </div>
</div>

      <div className="flex flex-1">
        <div className="w-1/5 m-2">
          <div className="bg-white max-h-screen w-full p-4 rounded-lg shadow-md overflow-y-auto">
            <div className="mb-4">
              <div className="relative">
                <textarea
                  placeholder="Ask AI..."
                  className="w-full py-2 pl-4 pr-10 text-sm bg-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 transition-all duration-300 ease-in-out resize-none"
                  rows={4}
                ></textarea>
                <button
                  className="absolute right-2 bottom-2 bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 transition-colors duration-300"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
        <div className="w-4/5 m-2">
          <AuditProgress className="m-2 flex flex-col" />
        </div>
      </div>
    </motion.div>
  );
};

export default AuditPage;-----------END OF FILE----------- 
 
                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\Dashboard.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../../store/reducers';
import DashboardLayout from 'components/Layout/DashboardLayout';
 

const Dashboard: React.FC = () => {
  const user = useSelector((state: RootState) => state.auth.user);

  return (
    <DashboardLayout>
      <h1 className="text-3xl font-bold text-text-primary mb-6">
        Welcome, {user?.name}!
      </h1>    
    </DashboardLayout>
  );
};

export default Dashboard;-----------END OF FILE----------- 
 
                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\LandingPage.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from 'store/reducers';
import SearchPage from './SearchPage';

const LandingPage: React.FC = () => {
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
  const user = useSelector((state: RootState) => state.auth.user);

  return (
    <div className="relative">
      <SearchPage />
      {isAuthenticated && (
        <div className="text-center mt-10">
          <h2 className="text-lg font-semibold">Welcome back, {user?.name}!</h2>
        </div>
      )}
    </div>
  );
};

export default LandingPage;-----------END OF FILE----------- 
 
                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\SearchPage.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { motion } from 'framer-motion';
import { useNavigate } from 'react-router-dom';
import { useDispatch } from 'react-redux';
import { setAuditMode, setUrl, submitUrl } from 'store/actions';
import MovingDotCircle from 'components/Ui/MovingDotCircle';
import SearchInput from 'components/Ui/SearchInput';

const SearchPage: React.FC = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();

  const handleSubmit = (url: string) => {
    dispatch(setUrl(url));
    dispatch(submitUrl(url) as any);
    dispatch(setAuditMode(true));
    navigate('/audit');
  };

  return (
    <motion.div
      initial={{ opacity: 0, top:0 }}
      animate={{ opacity: 1, top:10 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
    >
      <MovingDotCircle className="flex flex-col items-center mt-16 mb-10" />
      <SearchInput onSubmit={handleSubmit} className="flex flex-col items-center" />
    </motion.div>
  );
};

export default SearchPage;
-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\Audit\AuditCard.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from 'store/reducers';
import AuditCardLayout from 'components/Layout/AuditLayout/AuditCardLayout';
import { ApiEndpointConfig } from 'enum/apiEndpoints';

interface AuditCardProps {
  endpoint: ApiEndpointConfig;
  className: string;
}

const AuditCard: React.FC<AuditCardProps> = (prop) => {
  const data = useSelector((state: RootState) => state.search[prop.endpoint.index as keyof typeof state.search]);

  if (!data) return null;

  return (
    <AuditCardLayout {...prop} iconName={prop.endpoint.icon as React.ComponentProps<typeof AuditCardLayout>['iconName']} title={prop.endpoint.title}>
          {prop.endpoint.renderContent(data)}
    </AuditCardLayout>
  );
};
export default AuditCard;
-----------END OF FILE----------- 
 
                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\Audit\AuditProgress.tsx 
-----------START OF FILE----------- 
import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { apiEndpoints, ApiEndpointConfig } from "enum/apiEndpoints";
import AuditCard from "components/Pages/Audit/AuditCard";

interface AuditProgressInterface {
    className?: string;
}

const AuditProgress: React.FC<AuditProgressInterface> = () => {
    const [opacity, setOpacity] = useState<number>(0);

    useEffect(() => {
        const timer = setTimeout(() => setOpacity(1), 200);
        return () => clearTimeout(timer);
    }, []);

    return (
        <div style={{ opacity, transition: 'opacity 1s ease-in-out' }}>
            <div className="grid grid-cols-3 gap-3">
                {apiEndpoints.map((endpoint: ApiEndpointConfig, index: number) => (
                    <motion.div
                        key={index}
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5, delay: index * 0.1 }}
                    >
                        <AuditCard
                            className="bg-white rounded-xl shadow-lg border border-gray-100 transition-all duration-300 hover:shadow-xl"
                            endpoint={endpoint}
                        />
                    </motion.div>
                ))}
            </div>
        </div>
    );
};

export default AuditProgress;-----------END OF FILE----------- 
 
                            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Pages\Audit\AuditCards\RobotCard.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { useSelector } from 'react-redux';
import { RootState } from 'store/reducers';
import SimpleModal from 'components/Ui/Modals/SimpleModal';
import AskButton from 'components/Ui/AskButton';
import { ADD_AI_ROBOT_RESPONSE } from 'store/actions/actionTypes';
import { SeoSubjectEnum } from 'enum/seoSubjectEnum';

interface RobotCardProps {
  data: any
}

const RobotCard: React.FC<RobotCardProps> = ({ data }) => {
  const RetreavedDataRobot = useSelector(
    (state: RootState) => state.search.robot_data
  );
  const [showModal, setShowModal] = React.useState(false);

  const handleShowModal = () => {
    setShowModal(true);
  };

  const handleHideModal = () => {
    setShowModal(false);
  };

  return (
    <React.Fragment>
      {RetreavedDataRobot && (
        <>
          <div className="flex flex-col">
            <div className="flex items-center justify-normal">

              <span
                className={
                  RetreavedDataRobot.exist ? 'text-green-500' : 'text-red-500'
                }
              >
                {RetreavedDataRobot.exist ? (
                  <svg
                    className="w-6 h-6"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                ) : (
                  <svg
                    className="w-6 h-6"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                    />
                  </svg>
                )}
              </span>

              <p className="text-sm text-gray-500 ml-5">{RetreavedDataRobot.exist ? ('the Robot.text exist and it need some optimisations') : ('the Robot.text does not exist')}</p>
            </div>

            <div className="mt-4">

              <button
                className="bg-blue-400 hover:bg-blue-500 text-white font-semibold text-xs py-1 px-2 rounded-lg"
                onClick={handleShowModal}
              >
                Show Content
              </button>
              <AskButton seoSubject={SeoSubjectEnum.ROBOT} responseType={ADD_AI_ROBOT_RESPONSE} />
            </div>
          </div>
          <SimpleModal
            isOpen={showModal}
            onClose={handleHideModal}
            content={RetreavedDataRobot.content}
            title="Robot.txt Content"
          />
        </>
      )}
    </React.Fragment>
  );
};

export default RobotCard;-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\AskButton.tsx 
-----------START OF FILE----------- 
import { useSelector, useDispatch } from 'react-redux';
import { useState, useRef, useEffect } from 'react';
import { aiAsk } from 'store/actions/aiAsk';
import DOMPurify from 'dompurify'; // Optional, for security reasons
import html2canvas from 'html2canvas'; // Import html2canvas
import jsPDF from 'jspdf'; // Import jsPDF

interface AskButtonProps {
  seoSubject: string;
  responseType: string;
}

const AskButton: React.FC<AskButtonProps> = ({ seoSubject, responseType }) => {
  const dispatch = useDispatch();
  const sessionId = useSelector((state: any) => state.ai.sessionId);
  const [showTooltip, setShowTooltip] = useState(false);
  const answer = useSelector((state: any) => state.ai.answer);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const [arrowPosition, setArrowPosition] = useState(0);
  const tooltipRef = useRef<HTMLDivElement>(null); // Ref for the tooltip

  useEffect(() => {
    if (buttonRef.current && showTooltip) {
      const buttonRect = buttonRef.current.getBoundingClientRect();
      setArrowPosition(buttonRect.width / 2);
    }
  }, [showTooltip]);

  const handleAskClick = async () => {
    try {
      aiAsk(seoSubject, responseType, dispatch, sessionId);
      setShowTooltip(true);
    } catch (error) {
      console.error(error);
    }
  };

  const prettifyAnswer = (rawAnswer: string) => {
    // Escape and sanitize HTML
    const sanitizedAnswer = DOMPurify.sanitize(rawAnswer);

    // Replace '**' for bold, and insert <br> for line breaks
    const formattedAnswer = sanitizedAnswer
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Bold for **text**
      .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>') // Code block for ```code```
      .replace(/\n/g, '<br>'); // Newline breaks for readability

    return formattedAnswer;
  };

  const exportToPDF = () => {
    const input = tooltipRef.current;
    if (input) {
      html2canvas(input).then((canvas) => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF();
        const imgWidth = 190; // Width of the PDF
        const pageHeight = pdf.internal.pageSize.height;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        const heightLeft = imgHeight;

        let position = 0;

        // Add image to PDF
        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        position += heightLeft;

        // Check if another page is needed
        if (heightLeft >= pageHeight) {
          position = 0;
          pdf.addPage();
          pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        }

        pdf.save('tooltip-content.pdf');
      });
    }
  };

  return (
    <div className="relative inline-block">
      <button
        ref={buttonRef}
        className="bg-blue-400 hover:bg-blue-500 text-white font-semibold text-xs py-1 px-2 rounded-lg m-1"
        onClick={handleAskClick}
      >
        AI Assistant : How to improve?
      </button>
      {showTooltip && (
        <div
          ref={tooltipRef}
          className="absolute z-10 p-4 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 max-w-5xl w-screen"
          style={{ height: '60vh', overflowY: 'auto' }}
        >
    
          <button
            className="mt-2 text-sm text-blue-500 hover:text-blue-700"
            onClick={() => setShowTooltip(false)}
          >
            Close
          </button>
          <button
            className="mt-2 text-sm text-blue-500 hover:text-blue-700 float-right"
            onClick={exportToPDF} // Export to PDF button
          >
            Export to PDF
          </button>
          <div
            className="text-sm text-gray-700"
            dangerouslySetInnerHTML={{ __html: prettifyAnswer(answer) }} // Inject HTML safely
          ></div>
        </div>
      )}
    </div>
  );
};

export default AskButton;
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\Button.tsx 
-----------START OF FILE----------- 
import React, { ReactNode } from 'react';

interface ButtonProps {
  children: ReactNode;
  type?: 'button' | 'submit' | 'reset';
  onClick?: () => void;
  fullWidth?: boolean;
  className?: string;
}

const Button: React.FC<ButtonProps> = ({ children, type = 'button', onClick, fullWidth = false, className = '' }) => {
  return (
    <button
      type={type}
      onClick={onClick}
      className={`bg-primary text-white py-3 rounded-full hover:bg-opacity-90 transition-transform transform hover:scale-105 ${fullWidth ? 'w-full' : ''} ${className}`}
    >
      {children}
    </button>
  );
};

export default Button;
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\Card.tsx 
-----------START OF FILE----------- 
import React, { ReactNode } from 'react';

interface CardProps {
  title: string;
  children: ReactNode;
}

const Card: React.FC<CardProps> = ({ title, children }) => {
  return (
    <div className="bg-white rounded-lg shadow-sm border border-border p-4">
      <h2 className="text-xl font-semibold text-text-primary mb-4">{title}</h2>
      {children}
    </div>
  );
};

export default Card;
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\Icons.tsx 
-----------START OF FILE----------- 
import React from 'react';

interface GoogleIconProps {
  className?: string;
}

export const GoogleIcon: React.FC<GoogleIconProps> = ({ className }) => (
  <svg
    className={className}
    viewBox="0 0 48 48"
    width="24px"
    height="24px"
  >
    <path fill="#EA4335" d="M24 9.5c3.2 0 5.4 1.4 6.6 2.6l4.9-4.9C32.8 5.6 28.8 4 24 4c-6.1 0-11.4 3.4-14.1 8.4l5.7 4.5c1.5-4.5 5.8-7.4 10.4-7.4z"/>
    <path fill="#4285F4" d="M13.5 15.5l-5.7-4.5C5.3 13.2 4 16.5 4 20s1.3 6.8 3.8 9.1l5.5-4.4c-.7-1.7-1.1-3.4-1.1-5.2s.4-3.5 1.1-5.1z"/>
    <path fill="#FBBC05" d="M24 44c4.3 0 7.9-1.4 10.5-3.7l-5.1-4.1c-1.4 1-3.2 1.6-5.3 1.6-4.4 0-8.2-2.9-9.6-7l-5.5 4.3C12.6 40.6 18 44 24 44z"/>
    <path fill="#34A853" d="M43.6 20.3H24v7.4h11.3c-1 3.1-3.5 5.7-6.6 7l5.1 4.1c3.3-3 5.2-7.5 5.2-12.5 0-1-.1-2-.3-3z"/>
  </svg>
);
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\IconSet.tsx 
-----------START OF FILE----------- 
import React from 'react';

interface IconProps {
  className?: string;
}

export const ChartBarIcon: React.FC<IconProps> = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M16 8v8h-2V8h2zm-4 4v4H8v-4h4zm8-8H4v16h16V4z"/>
  </svg>
);

export const RobotIcon: React.FC<IconProps> = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 2a2 2 0 0 1 2 2c0 .74-.4 1.38-1 1.72V7h2a2 2 0 0 1 2 2v2h1a3 3 0 0 1 3 3v7h-2v-7a1 1 0 0 0-1-1h-1v3a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2v-3H6a1 1 0 0 0-1 1v7H3v-7a3 3 0 0 1 3-3h1V9a2 2 0 0 1 2-2h2V5.72c-.6-.34-1-.98-1-1.72a2 2 0 0 1 2-2z"/>
  </svg>
);

export const SpeedIcon: React.FC<IconProps> = ({ className }) => (
  <svg className={className} viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.3-4.8L11 13V7h2v5.3l3.3 2.3-1 1.4z"/>
  </svg>
);

// Add more icons as needed

export type IconName = 'ChartBar' | 'Robot' | 'Speed'; // Add more icon names as you create them

export const getIcon = (name: IconName): React.FC<IconProps> => {
  switch (name) {
    case 'ChartBar':
      return ChartBarIcon;
    case 'Robot':
      return RobotIcon;
    case 'Speed':
      return SpeedIcon;
    default:
      return ChartBarIcon; // Default icon
  }
};-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\InputField.tsx 
-----------START OF FILE----------- 
import React, { ReactNode } from 'react';

interface InputFieldProps {
  type: string;
  value: string;
  onChange: (value: string) => void;
  placeholder: string;
  icon: ReactNode;
}

const InputField: React.FC<InputFieldProps> = ({ type, value, onChange, placeholder, icon }) => {
  return (
    <div className="relative">
      <input
        type={type}
        value={value}
        onChange={(e) => onChange(e.target.value)}
        required
        placeholder={placeholder}
        className="w-full mt-2 pl-10 pr-4 py-3 border-b-2 border-gray-300 focus:outline-none focus:border-primary"
      />
      <div className="absolute left-3 top-1/2 transform -translate-y-1/2">
        {icon}
      </div>
    </div>
  );
};

export default InputField;
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\Menu.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { Link } from 'react-router-dom';

interface MenuItem {
  label: string;
  link: string;
}

interface MenuProps {
  items: MenuItem[];
}

const Menu: React.FC<MenuProps> = ({ items }) => {
  return (
    <nav className="flex space-x-4">
      {items.map((item, index) => (
        <Link
          key={index}
          to={item.link}
          className="text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
        >
          {item.label}
        </Link>
      ))}
    </nav>
  );
};

export default Menu;-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\MovingDotCircle.tsx 
-----------START OF FILE----------- 
import React, { useEffect, useRef, useState } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../../store/reducers';

const messages = [
  "Welcome, please enter the URL of your online business.",
  "After that, we dive into improving your website.",
  "So your business can flourish."
];

interface MovingDotCircleInterface {
  className?: string;
}

const MovingDotCircle: React.FC<MovingDotCircleInterface> = (props) => {
  const dotRef = useRef<HTMLDivElement | null>(null);
  const WarDotRef = useRef<HTMLDivElement | null>(null);
  const isLoading = useSelector((state: RootState) => state.search.isLoading);
  const auditMode = useSelector((state: RootState) => state.search.auditMode);
  const [currentMessageIndex, setCurrentMessageIndex] = useState<number>(0);
  const [fadeIn, setFadeIn] = useState<boolean>(true);

  // Handle the mouse movement to move the dot in normal mode
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (dotRef.current && !isLoading ) {
        const circle = dotRef.current.parentElement!;
        const circleRect = circle.getBoundingClientRect();
        const circleRadius = circleRect.width / 2;
        const maxMovement = circleRadius * 0.05;

        const x = e.clientX - (circleRect.left + circleRadius);
        const y = e.clientY - (circleRect.top + circleRadius);

        const scaledX = (x / circleRadius) * maxMovement;
        const scaledY = (y / circleRadius) * maxMovement;

        dotRef.current.style.transform = `translate(${scaledX}px, ${scaledY}px)`;
      }
    };

    window.addEventListener('mousemove', handleMouseMove);

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [isLoading, auditMode]);

  // Handle the changes when loading or audit mode changes
  useEffect(() => {
    if (dotRef.current && WarDotRef.current) {
      if (isLoading) {
        dotRef.current.classList.add('animate-ai-pulse');
      } else {
        dotRef.current.classList.remove('animate-ai-pulse');
      }

      if (isLoading) {
        dotRef.current.classList.add('bg-blue-500');
        dotRef.current.classList.add('position_animation');
        dotRef.current.classList.add('animate-spinner');
        dotRef.current.classList.remove('bg-red-500');
        WarDotRef.current.classList.add('w-full');
        WarDotRef.current.classList.add('h-full');
        WarDotRef.current.classList.add('animate-spin-fast'); 
      } else {
        WarDotRef.current.classList.remove('w-full');
        WarDotRef.current.classList.remove('h-full');
        WarDotRef.current.classList.remove('animate-spin-fast');
        dotRef.current.classList.remove('bg-blue-500');
        dotRef.current.classList.add('bg-red-500');
        dotRef.current.classList.remove('position_animation');
        dotRef.current.classList.remove('animate-spinner');
      }
    }
  }, [isLoading, auditMode]);

  // Handle message transitions
  useEffect(() => {
    const interval = setInterval(() => {
      setFadeIn(false);
      setTimeout(() => {
        setCurrentMessageIndex((prevIndex) => (prevIndex + 1) % messages.length);
        setFadeIn(true);
      }, 2000);
    }, 4000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div  {...props}>
      <div className="w-32 h-32 rounded-full border border-gray-300 flex items-center justify-center bg-white shadow-sm mb-4 relative">
      <div 
        ref={WarDotRef} 
        className="absolute animate-spinner">
        <div
          ref={dotRef}
          className="w-4 h-4 bg-red-500 rounded-full transition-transform duration-75"
        ></div>
      </div>
      </div>

      {!auditMode && (
        <p
          className={`text-3xl font-bold tracking-tight text-gray-900 text-center leading-tight transition-opacity duration-500 ${fadeIn ? 'opacity-100' : 'opacity-0'}`}
        >
          {messages[currentMessageIndex]}
        </p>
      )}
    </div>
  );
};

export default MovingDotCircle;
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\SearchInput.tsx 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../../store/reducers';

interface SearchInputProps {
  className?: string;
  onSubmit: (url: string) => void;
}

const SearchInput: React.FC<SearchInputProps> = ({ className, onSubmit }) => {
  const [url, setUrl] = useState('');
  const isLoading = useSelector((state: RootState) => state.search.isLoading);

  const handleSubmit = () => {
    onSubmit(url);
  };

  return (
    <div className={className}>
      <div className="flex items-center border border-border rounded-full px-5 py-3 bg-white shadow-sm transition-all duration-300 ease-in-out w-full max-w-2xl">
        <input
          type="text"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          placeholder="Enter website URL"
          className="flex-1 bg-transparent text-lg focus:outline-none transition-all duration-300 ease-in-out text-text-primary"
        />
        <button
          className="bg-gradient-to-r from-primary to-secondary text-white font-semibold px-6 py-2 rounded-full shadow-lg transform transition-transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-secondary"
          onClick={handleSubmit}
          disabled={isLoading}
        >
          {isLoading ? 'Auditing...' : 'Audit'}
        </button>
      </div>
    </div>
  );
};

export default SearchInput;-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\Spinner.tsx 
-----------START OF FILE----------- 
import React from 'react';

const Spinner: React.FC = () => {
  return (
    <div className="flex justify-center items-center mt-4">
        <svg className="h-5 w-5 text-blue-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
    </div>
  );
};

export default Spinner;
-----------END OF FILE----------- 
 
                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\WaveDivider.tsx 
-----------START OF FILE----------- 
import React from 'react';

const WaveDivider: React.FC = () => {
  return (
    <div className="w-full fixed bottom-0 left-0 right-0 -z-10">
      <svg viewBox="0 0 1440 320" className="w-full">
        <path fill="currentColor" fillOpacity="1" className="text-gray-200 dark:text-gray-800" d="M0,160L40,170.7C80,181,160,203,240,197.3C320,192,400,160,480,144C560,128,640,128,720,138.7C800,149,880,171,960,170.7C1040,171,1120,149,1200,144C1280,139,1360,149,1400,154.7L1440,160L1440,320L0,320Z"></path>
      </svg>
    </div>
  );
};

export default WaveDivider;-----------END OF FILE----------- 
 
                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\components\Ui\Modals\SimpleModal.tsx 
-----------START OF FILE----------- 
import React from 'react';

interface ModalProps {
    isOpen: boolean;
    onClose: () => void;
    content: string;
    title: string;
}
  
const Modal: React.FC<ModalProps> = ({ isOpen, onClose, content, title }) => {
    if (!isOpen) return null;
  
    return (
      <div className="fixed z-10 inset-0 overflow-y-auto">
        <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
          <div className="fixed inset-0 transition-opacity" aria-hidden="true">
            <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
          </div>
  
          <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">​</span>
  
          <div className="inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
            <div className="sm:flex sm:items-start">
              <div className="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                <h3 className="text-lg leading-6 font-medium text-gray-900" id="modal-title">
                  {title}
                </h3>
  
                <div className="mt-2">
                  <p className="text-sm text-gray-500">
                    <pre className="whitespace-pre-wrap">
                      {content}
                    </pre>
                  </p>
                </div>
              </div>
            </div>
            <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
              <button
                type="button"
                className="
                  w-full
                  inline-flex
                  justify-center
                  rounded-md
                  border
                  border-transparent
                  shadow-sm
                  px-4
                  py-2
                  bg-blue-600
                  text-base
                  font-medium
                  text-white
                  hover:bg-blue-700
                  focus:outline-none
                  focus:ring-2
                  focus:ring-offset-2
                  focus:ring-blue-500
                  sm:ml-3
                  sm:w-auto
                  sm:text-sm
                "
                onClick={onClose}
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    );
};

export default Modal;-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\enum\apiEndpoints.tsx 
-----------START OF FILE----------- 
import RobotCard from "components/Pages/Audit/AuditCards/RobotCard";
import { ADD_DATA_ROBOT, ADD_DATA_SITEMAP } from "../store/actions/actionTypes";
import { SeoSubjectEnum } from 'enum/seoSubjectEnum';
import { ADD_AI_ROBOT_RESPONSE, ADD_AI_SITEMAP_RESPONSE} from 'store/actions/actionTypes';
import { CategoryEnum } from "enum/CategoryEnum";
import { IndexEnum } from "enum/dataIndexEnum";

export interface ApiEndpointConfig {
    category: CategoryEnum;
    apiEndPoint: string;
    type: string;
    icon: string;
    index: IndexEnum;
    title: string;
    seoSubject: SeoSubjectEnum;
    aiResponseType: string;
    renderContent: (data: any) => JSX.Element;
}

export const apiEndpoints: ApiEndpointConfig[] = [
  {
    category: CategoryEnum.SEO,
    apiEndPoint: 'seo/robots',
    type: ADD_DATA_ROBOT,
    index: IndexEnum.ROBOT_DATA,
    icon: 'BugAntIcon',
    title: "Audit for Robots Seo",
    seoSubject: SeoSubjectEnum.ROBOT,
    aiResponseType: ADD_AI_ROBOT_RESPONSE,
    renderContent: (data) => (
      <RobotCard data={data}></RobotCard>
    )
  },
  {
    category: CategoryEnum.SEO,
    apiEndPoint: 'seo/sitemap',
    type: ADD_DATA_SITEMAP,
    index: IndexEnum.SITEMAP_DATA,
    icon: 'BugAntIcon',
    title: "Audit for Sitemap Seo",
    seoSubject: SeoSubjectEnum.ROBOT,
    aiResponseType: ADD_AI_SITEMAP_RESPONSE,
    renderContent: (data) => (
    <></>
    )
  }
  // Add more endpoints here as needed
];-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\enum\CategoryEnum.ts 
-----------START OF FILE----------- 
export enum CategoryEnum {
  SEO = 'On-site SEO',
}
-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\enum\dataIndexEnum.tsx 
-----------START OF FILE----------- 
export enum IndexEnum {
    ROBOT_DATA = 'robot_data',
    SITEMAP_DATA = 'sitemap_data',
}-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\enum\front_end_ts.code-workspace 
-----------START OF FILE----------- 
{
	"folders": [
		{
			"path": "../.."
		}
	],
	"settings": {}
}-----------END OF FILE----------- 
 
                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\enum\seoSubjectEnum.ts 
-----------START OF FILE----------- 
export  enum SeoSubjectEnum {
    ROBOT = 'ROBOT',
}
-----------END OF FILE----------- 
 
                                            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\hooks\useAuditSummary.ts 
-----------START OF FILE----------- 
import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../store/reducers';

export const useAuditSummary = () => {
  const [summary, setSummary] = useState({ totalAudits: 0, averageScore: 0 });
  const userId = useSelector((state: RootState) => state.auth.user?.id);

  useEffect(() => {
    // Fetch audit summary from API
    // This is a placeholder, replace with actual API call
    const fetchSummary = async () => {
      // const response = await fetch(`/api/audit-summary/${userId}`);
      // const data = await response.json();
      // setSummary(data);
      setSummary({ totalAudits: 10, averageScore: 85 });
    };

    fetchSummary();
  }, [userId]);

  return summary;
};
-----------END OF FILE----------- 
 
                                            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\hooks\useRecentAudits.ts 
-----------START OF FILE----------- 
import { useState, useEffect } from 'react';
import { useSelector } from 'react-redux';
import { RootState } from '../store/reducers';

interface Audit {
  id: string;
  url: string;
  date: string;
}

export const useRecentAudits = () => {
  const [recentAudits, setRecentAudits] = useState<Audit[]>([]);
  const userId = useSelector((state: RootState) => state.auth.user?.id);

  useEffect(() => {
    // Fetch recent audits from API
    // This is a placeholder, replace with actual API call
    const fetchRecentAudits = async () => {
      // const response = await fetch(`/api/recent-audits/${userId}`);
      // const data = await response.json();
      // setRecentAudits(data);
      setRecentAudits([
        { id: '1', url: 'example.com', date: '2023-04-01' },
        { id: '2', url: 'test.com', date: '2023-03-28' },
      ]);
    };

    fetchRecentAudits();
  }, [userId]);

  return recentAudits;
};
-----------END OF FILE----------- 
 
                                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\pages\Audit.tsx 
-----------START OF FILE----------- 
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import CrawlingProgress from '../components/CrawlingProgress';

// ... (existing imports)

const Audit: React.FC = () => {
  const { sessionId } = useParams<{ sessionId: string }>();
  const [crawlingId, setCrawlingId] = useState<string | null>(null);

  // ... (existing code)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    // ... (existing submit logic)
    const response = await fetch('/api/crawler/crawl', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: websiteUrl }),
    });
    const data = await response.json();
    setCrawlingId(data.crawlingId);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-4">Auditing</h1>
      <p className="text-gray-600 mb-4">Session ID: {sessionId}</p>
      
      {crawlingId && <CrawlingProgress crawlingId={crawlingId} />}
      
      <p className="text-lg font-semibold mb-4">Audit in progress</p>
      
      {/* ... (rest of the component) */}
    </div>
  );
};

export default Audit;
-----------END OF FILE----------- 
 
                                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\routes\AppRoutes.tsx 
-----------START OF FILE----------- 
import React from 'react';
import { Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { RootState } from 'store/reducers';
import BaseLayout from 'components/Layout/BaseLayout';
import LandingPage from 'components/Pages/LandingPage';
import SignIn from 'components/Auth/SignIn';
import SignUp from 'components/Auth/SignUp';
import Dashboard from 'components/Pages/Dashboard';
import SearchPage from 'components/Pages/SearchPage';
import AuditPage from 'components/Pages/AuditPage';
import { AnimatePresence } from 'framer-motion';

const AppRoutes: React.FC = () => {
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
  const location = useLocation();

  return (
    <BaseLayout>
      <AnimatePresence mode="wait">
        <Routes location={location} key={location.pathname}>
          <Route path="/" element={<LandingPage />} />
          <Route path="/search" element={<SearchPage />} />
          <Route path="/audit" element={<AuditPage />} />
          <Route
            path="/sign-in"
            element={isAuthenticated ? <Navigate to="/" replace /> : <SignIn />}
          />
          <Route
            path="/sign-up"
            element={isAuthenticated ? <Navigate to="/" replace /> : <SignUp />}
          />
          <Route
            path="/dashboard"
            element={isAuthenticated ? <Dashboard /> : <Navigate to="/sign-in" replace />}
          />
        </Routes>
      </AnimatePresence>
    </BaseLayout>
  );
};

export default AppRoutes;-----------END OF FILE----------- 
 
                                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\services\auditService.tsx 
-----------START OF FILE----------- 
import axios from 'axios';

const BASE_URL = 'https://growthagent.onrender.com/api'; // Update with your actual backend URL

interface AuditResult {
  [key: string]: any;
}

interface AuditService {
  fetchAuditResults: (url: string, auditSteps: { urlText: string; name: string }[]) => Promise<AuditResult>;
}

const auditService: AuditService = {
  fetchAuditResults: async (url, auditSteps) => {
    const results: AuditResult = {};
    for (const step of auditSteps) {
      try {
        const response = await axios.post(`${BASE_URL}/audit/${step.urlText}`, { url });
        results[step.name] = response.data;
      } catch (error) {
        console.error(`Error fetching audit results for ${step.name}:`, error);
        // Handle error if needed
      }
    }
    return results;
  }
};

export default auditService;
-----------END OF FILE----------- 
 
                                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\services\authService.tsx 
-----------START OF FILE----------- 
export const handleGoogleLogin = () => {
  console.log('Google Login');
};

// Placeholder for future social logins (e.g., Facebook, Twitter, etc.)
export const handleFacebookLogin = () => {
  console.log('Facebook Login');
};

export const handleTwitterLogin = () => {
  console.log('Twitter Login');
};
-----------END OF FILE----------- 
 
                                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\services\token.service.ts 
-----------START OF FILE----------- 
export class TokenService {
    static getToken(): string | null {
      return localStorage.getItem('token');
    }
  
    static isTokenValid(): boolean {
      const token = this.getToken();
      return !!token; // Check if the token exists
    }
  }-----------END OF FILE----------- 
 
                                                            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\store.ts 
-----------START OF FILE----------- 
import { configureStore } from '@reduxjs/toolkit';
import {thunk} from 'redux-thunk';
import rootReducer from './reducers';

const store = configureStore({
  reducer: rootReducer,
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(thunk),
});

export default store;
-----------END OF FILE----------- 
 
                                                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\actions\actionTypes.ts 
-----------START OF FILE----------- 

export const SUBMIT_URL = 'SUBMIT_URL';
export const SET_AUDIT_MODE = 'SET_AUDIT_MODE';

// Search action types
export const SET_URL = 'SET_URL';
export const SET_LOADING = 'SET_LOADING';

// SEO action types
export const SET_SESSION_ID = 'SET_SESSION_ID';


// Auth action types
export const AUTH_REQUEST = 'AUTH_REQUEST';
export const AUTH_SUCCESS = 'AUTH_SUCCESS';
export const AUTH_FAILURE = 'AUTH_FAILURE';
export const SIGN_IN_SUCCESS = 'SIGN_IN_SUCCESS';
export const SIGN_IN_FAILURE = 'SIGN_IN_FAILURE';
export const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';
export const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';
export const SIGN_OUT = 'SIGN_OUT';

//Audit data
export const ADD_DATA_ROBOT = 'ADD_DATA_ROBOT';
export const ADD_DATA_SITEMAP = 'ADD_ADD_DATA_SITEMAPSITEMAP_ROBOT';

//ai response
export const ADD_AI_ROBOT_RESPONSE = 'ADD_AI_RESPONSE';
export const ADD_AI_SITEMAP_RESPONSE = 'ADD_AI_RESPONSE';-----------END OF FILE----------- 
 
                                                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\actions\aiAsk.ts 
-----------START OF FILE----------- 
import BASE_API_URL from '../../config';
import { TokenService } from 'services/token.service';
import { addAiResponse, setLoading } from 'store/actions';

const getToken = () => {
  if (!TokenService.isTokenValid()) {
    throw new Error("Authorization token is missing or invalid.");
  }
  return TokenService.getToken();
};

function processChunk(value: Uint8Array | undefined, done: boolean, dispatch: (action: any) => void) {
  try {
    const decoder = new TextDecoder();
    return  JSON.parse(decoder.decode(value || new Uint8Array(), { stream: !done }));
    // Process the chunk here if needed
  } catch (error) {
    if (done) {
      dispatch(setLoading(false));
    }
    return {response:''};
  }
}

export const aiAsk = async (seoSubject: string, responseType: string, dispatch: any, sessionId: string) => {
  try {
    dispatch(setLoading(true));
    const response = await fetch(`${BASE_API_URL}/ai/ask`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${getToken()}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ seoSubject, sessionId }),
    });

    if (!response.body) {
      console.error("No response body");
      return;
    }

    const reader = response.body.getReader();

    let done = false;
    let accumulatedResponse = '';

    while (!done) {
      const { value, done: readerDone } = await reader.read();
      done = readerDone;
      const chunk = processChunk(value, done, dispatch);
      accumulatedResponse += chunk?.response ? chunk?.response : '';
      dispatch(addAiResponse(accumulatedResponse, responseType));
      if (done) {
        dispatch(setLoading(false));
      }
    }
    
    
  } catch (error) {
    console.error('Error during AI ask:', error);
    return null;
  }
};
-----------END OF FILE----------- 
 
                                                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\actions\authActions.ts 
-----------START OF FILE----------- 
import axios from 'axios';
import { Dispatch } from 'redux';
import { NavigateFunction } from 'react-router-dom';
import { jwtDecode } from 'jwt-decode';
import { CredentialResponse } from '@react-oauth/google';
import {
  AUTH_REQUEST,
  SIGN_IN_SUCCESS,
  SIGN_IN_FAILURE,
  SIGN_UP_SUCCESS,
  SIGN_UP_FAILURE,
  SIGN_OUT,
} from './actionTypes';
import BASE_API_URL from 'config';

export const signUp = (userData: { name: string; email: string; password: string }) => async (dispatch: any) => {
  dispatch({ type: AUTH_REQUEST });
  try {
    const response = await axios.post(`${BASE_API_URL}/auth/register`, userData);
    const { token } = response.data;
    localStorage.setItem('token', token); // Store token
    dispatch({
      type: SIGN_UP_SUCCESS,
      payload: jwtDecode(token),
    });
  } catch (error: any) {
    dispatch({
      type: SIGN_UP_FAILURE,
      payload: error.response?.data?.message || 'Sign-up failed',
    });
    throw new Error(error.response?.data?.message || 'Sign-up failed');
  }
};

export const signIn = (credentials: { email: string; password: string }) => async (dispatch: any) => {
  dispatch({ type: AUTH_REQUEST });
  try {
    const response = await axios.post(`${BASE_API_URL}/auth/login`, credentials);
    const { access_token } = response.data;
    localStorage.setItem('token', access_token); // Store token
    const decodedUser = jwtDecode(access_token);

    dispatch({
      type: SIGN_IN_SUCCESS,
      payload: decodedUser,
    });
  } catch (error: any) {
    dispatch({
      type: SIGN_IN_FAILURE,
      payload: error.response?.data?.message || 'Sign-in failed',
    });
    throw new Error(error.response?.data?.message || 'Sign-in failed');
  }
};

export const signOut = () => (dispatch: any) => {
  localStorage.removeItem('token'); // Remove token
  dispatch({ type: SIGN_OUT });
};


export const handleGoogleSignIn = (credentialResponse: CredentialResponse, navigate: NavigateFunction) => {
  return async (dispatch: Dispatch) => {
    dispatch({ type: AUTH_REQUEST });
    try {
      const { credential } = credentialResponse;

      if (!credential) {
        throw new Error('Google Sign-In failed');
      }

      const backendResponse = await axios.post(`${BASE_API_URL}/auth/google`, {
        token: credential,
      });

      const { access_token } = backendResponse.data;

      localStorage.setItem('token', access_token);

      const decodedUser = jwtDecode<any>(access_token);

      dispatch({
        type: SIGN_IN_SUCCESS,
        payload: decodedUser,
      });

      navigate('/dashboard');
    } catch (error: any) {
      dispatch({
        type: SIGN_IN_FAILURE,
        payload: error.message || 'Google Sign-In failed',
      });
    };
  };
}
-----------END OF FILE----------- 
 
                                                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\actions\index.ts 
-----------START OF FILE----------- 
import { SET_URL, SET_LOADING, SET_AUDIT_MODE, SET_SESSION_ID } from './actionTypes';
export { submitUrl }  from 'store/actions/submitUrl';

export const setUrl = (url: string) => ({
  type: SET_URL,
  payload: url,
});

export const setLoading = (isLoading: boolean) => ({
  type: SET_LOADING,
  payload: isLoading,
});

export const setAuditMode = (isLoading: boolean) => ({
  type: SET_AUDIT_MODE,
  payload: isLoading,
});

export const addSessionId = (sessionId: string) => ({
  type: SET_SESSION_ID,
  payload: sessionId,
});

export const addData = (data: any, type: string) => ({
  type: type,
  payload: data,
});

export const addAiResponse = (response: string, type: string) => ({
  type: type,
  payload: response,
});
-----------END OF FILE----------- 
 
                                                                C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\actions\submitUrl.ts 
-----------START OF FILE----------- 
import { apiEndpoints } from '../../enum/apiEndpoints';
import BASE_API_URL from '../../config';
import axios from 'axios';
import { setLoading, addData, addSessionId } from '../actions';
import { TokenService } from 'services/token.service';
export const submitUrl = (url: string) => {

   // New function to create an audit session
  const createAuditSession = async () => {
    console.log(getToken());
    const response = await axios.post(`${BASE_API_URL}/audit/new`, {}, 
    {
      headers: {
        Authorization: `Bearer ${getToken()}`, // Headers should be a separate argument
      },
    });
    return response.data; // This will return the auditId
  };
  
  const getToken = () => {
    /*if (!TokenService.isTokenValid()) {
      throw new Error("Authorization token is missing or invalid.");
    }*/
    return TokenService.getToken();
  }

  // New function to call the backend crawler
  const callBackendCrawler = async (auditId: string) => {
    const response = await axios.post(`${BASE_API_URL}/crawler/crawl`, 
    { 
      url,
      auditId 
    },
    {
      headers: {
        Authorization: `Bearer ${getToken()}`,
      },
    });
    return response.data;
  };
  
  return async (dispatch: any) => {
    dispatch(setLoading(true));
    try {
      // Create the audit session
      const auditSession = await createAuditSession();
      dispatch(addSessionId(auditSession.auditId));

      // Call the backend crawler
      await callBackendCrawler(auditSession.auditId);

      // Proceed with multiple API calls
      for (const endpoint of apiEndpoints) {
        const response = await axios.get(`${BASE_API_URL}/${endpoint.apiEndPoint}`, {
          params: {
            url,
            auditId: auditSession.auditId,
          },
          headers: {
            Authorization: `Bearer ${getToken()}`,
          },
        });
        dispatch(addData(response.data, endpoint.type));
      }
    } catch (error) {
      console.error("Error creating audit session or fetching data:", error);
    } finally {
      dispatch(setLoading(false));
    }
  };
};
-----------END OF FILE----------- 
 
                                                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\reducers\aiReducer.ts 
-----------START OF FILE----------- 
import { ADD_AI_ROBOT_RESPONSE, SET_SESSION_ID } from '../actions/actionTypes';

const aiReducer = (state = {}, action: any) => {
  console.log(action);
  switch (action.type) {
    case ADD_AI_ROBOT_RESPONSE:
      return { ...state, answer: action.payload };
    case SET_SESSION_ID:
        return { ...state, sessionId: action.payload };
    default:
      return state;
  }
};

export default aiReducer;
-----------END OF FILE----------- 
 
                                                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\reducers\authReducer.ts 
-----------START OF FILE----------- 
import {
  AUTH_REQUEST,
  AUTH_SUCCESS,
  AUTH_FAILURE,
  SIGN_IN_SUCCESS,
  SIGN_IN_FAILURE,
  SIGN_UP_SUCCESS,
  SIGN_UP_FAILURE,
  SIGN_OUT,
} from '../actions/actionTypes';
import {jwtDecode} from 'jwt-decode';

// Function to verify token validity
const isValidToken = (token: string | null): boolean => {
  if (!token) return false;
  try {
    const decoded: any = jwtDecode(token);
    return decoded.exp * 1000 > Date.now(); // Check if token is expired
  } catch (e) {
    return false;
  }
};

// Initialize state from localStorage
const token = localStorage.getItem('token');
const initialState = {
  isAuthenticated: !!token && isValidToken(token),
  user: token && isValidToken(token) ? jwtDecode(token) : null,
  token: token && isValidToken(token) ? token : null,
  error: null,
  isLoading: false,
};

const authReducer = (state = initialState, action: any) => {
  switch (action.type) {
    case SIGN_IN_SUCCESS:
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload,
        token: action.payload.token,
        error: null,
        isLoading: false,
      };
    case SIGN_IN_FAILURE:
    case SIGN_UP_FAILURE:
    case AUTH_FAILURE:
      return {
        ...state,
        isAuthenticated: false,
        user: null,
        token: null,
        error: action.payload,
        isLoading: false,
      };
    case SIGN_UP_SUCCESS:
      return {
        ...state,
        isAuthenticated: true,
        user: action.payload,
        token: action.payload.token,
        error: null,
        isLoading: false,
      };
    case SIGN_OUT:
      return {
        ...initialState,
        isAuthenticated: false,
        user: null,
        token: null,
      };
    case AUTH_REQUEST:
      return {
        ...state,
        isLoading: true,
        error: null,
      };
    case AUTH_SUCCESS:
      return {
        ...state,
        isLoading: false,
        isAuthenticated: true,
        user: action.payload,
      };
    default:
      return state;
  }
};

export default authReducer;
-----------END OF FILE----------- 
 
                                                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\reducers\index.ts 
-----------START OF FILE----------- 
import { combineReducers } from 'redux';
import searchReducer from './searchReducer';
import authReducer from './authReducer';
import aiReducer from './aiReducer';

const rootReducer = combineReducers({
  search: searchReducer,
  auth: authReducer,
  ai: aiReducer,
});

export type RootState = ReturnType<typeof rootReducer>;

export default rootReducer;
-----------END OF FILE----------- 
 
                                                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\reducers\rootReducer.js 
-----------START OF FILE----------- 
import { combineReducers } from 'redux';
import searchReducer from './searchReducer';

const rootReducer = combineReducers({
  search: searchReducer,
});

export default rootReducer;-----------END OF FILE----------- 
 
                                                                    C:\Workspace\Web\Ai Business grow project\front_end_ts\src\store\reducers\searchReducer.ts 
-----------START OF FILE----------- 
import { SET_URL, SET_LOADING, SUBMIT_URL, ADD_DATA_ROBOT, SET_AUDIT_MODE, ADD_DATA_SITEMAP } from '../actions/actionTypes';
import { IndexEnum } from 'enum/dataIndexEnum';

interface SearchState {
  url: string;
  isLoading: boolean;
  robot_data: any[];
  auditMode: boolean;
}

const initialState: SearchState = {
  url: '',
  isLoading: false,
  robot_data: [],
  auditMode: false,
};

const searchReducer = (state = initialState, action: any): SearchState => {
  console.log(action);
  switch (action.type) {
    case SET_URL:
      return {
        ...state,
        url: action.payload,
      };
    case SET_LOADING:
      return {
        ...state,
        isLoading: action.payload,
      };
    case SUBMIT_URL:
      return {
        ...state,
        isLoading: true,
      };
    case ADD_DATA_ROBOT:
      return {
        ...state,
        [IndexEnum['ROBOT_DATA' as keyof typeof IndexEnum]]: action.payload,
      };
    case ADD_DATA_SITEMAP:
      return {
        ...state,
        [IndexEnum['SITEMAP_DATA' as keyof typeof IndexEnum]]: action.payload,
      };
    case SET_AUDIT_MODE:
      return {
        ...state,
        auditMode: action.payload,
      };
    default:
      return state;
  }
};
export default searchReducer;
-----------END OF FILE----------- 
 
                                                                        C:\Workspace\Web\Ai Business grow project\front_end_ts\src\styles\theme.ts 
-----------START OF FILE----------- 
export const theme = {
  colors: {
    primary: '#3B82F6',
    secondary: '#8B5CF6',
    background: '#F3F4F6',
    text: {
      primary: '#1F2937',
      secondary: '#4B5563',
    },
    border: '#E5E7EB',
  },
  fonts: {
    sans: 'Inter, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif',
  },
  fontSizes: {
    xs: '0.75rem',
    sm: '0.875rem',
    base: '1rem',
    lg: '1.125rem',
    xl: '1.25rem',
    '2xl': '1.5rem',
  },
  spacing: {
    1: '0.25rem',
    2: '0.5rem',
    3: '0.75rem',
    4: '1rem',
    6: '1.5rem',
    8: '2rem',
  },
  borderRadius: {
    sm: '0.125rem',
    default: '0.25rem',
    md: '0.375rem',
    lg: '0.5rem',
  },
  shadows: {
    sm: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
    default: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
    md: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
    lg: '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
  },
};-----------END OF FILE----------- 
 
                                                                            C:\Workspace\Web\Ai Business grow project\front_end_ts\src\utils\api.ts 
-----------START OF FILE----------- 
import axios from 'axios';
import   BASE_API_URL  from '../config';

const api = axios.create({
  baseURL: BASE_API_URL,
});

export const fetchAuditData = async (auditId: string, token: string) => {
  const response = await api.get(`/audit/${auditId}`, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};

export const submitAudit = async (url: string, token: string) => {
  const response = await api.post('/audit', { url }, {
    headers: { Authorization: `Bearer ${token}` },
  });
  return response.data;
};

// Add more API functions as needed
-----------END OF FILE----------- 
 
